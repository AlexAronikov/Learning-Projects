{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You have 4 hours to solve and hand in this notebook. Please note that both the data and the tasks are invididualized: you will work with one of several randomly chosen scenarios and we have created individual databases for each of you for your particular scenario."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Your Scenario: Buildings\n",
    "\n",
    "The travel bans have been loosened again and you are managing a travel agency for tourists interested in architecture. In order to organize your tours, you have created a database extracted from [Wikidata](https://www.wikidata.org/) with a sample collection of ***Buildings***, famous ***People*** (including architects or heads of state), ***Cities***, and ***Countries***.\n",
    "\n",
    "You have decided for the following schema:\n",
    "\n",
    "    Buildings(id, name, date_built, id_city)\n",
    "    has_architect(id_building,id_architect)\n",
    "    People(id, name, date_of_birth, date_of death, occupation, place_of_birth, place_of_death)\n",
    "    City(id, name, id_country)\n",
    "    Country(id, name, id_current_head_of_state)\n",
    "\n",
    "where the attribute `id` refers to the unique URL/ID used in Wikidata, whereas all attributes prefixed with `id_` refer to foreign keys from other tables, e.g, `id_architect` and `id_current_head_of_state` refer to ids in the `People` table, whereas `id_country...` refers to ids in the `Country` table, `place_of_birth`,  `place_of_death`,  refers to ids of cities, etc.\n",
    "\n",
    "<font color=red>**REMARK/ATTENTION: Do not confuse the tables with the tables `building`, `architect`, etc. that we had already created/used in our database in the lecture notebooks). This is a different schema!**</font>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 0:\n",
    "\n",
    "As usual, first connect to your database and initialize SQL Magic:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Login is recognized as  h12125573 . It should be your WU login.\n",
      "If not, please change the previous line to be: LOGIN = 'hXYZYZY' # (replace hXYZYZY with your WU login)\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import re\n",
    "%load_ext sql\n",
    " \n",
    "LOGIN = os.environ.get('JUPYTERHUB_USER')\n",
    "DATABASE = LOGIN\n",
    "HOSTNAME = \"postgresql.student-db.svc.cluster.local\"\n",
    "MATNR = re.sub(\"[^0-9]\", \"\", str(LOGIN))\n",
    "if(MATNR==\"\"): MATNR = LOGIN\n",
    "\n",
    "print(\"Login is recognized as \", LOGIN,\". It should be your WU login.\",)\n",
    "print(\"If not, please change the previous line to be: LOGIN = 'hXYZYZY' # (replace hXYZYZY with your WU login)\")\n",
    "\n",
    "%sql postgresql://$LOGIN:$LOGIN@$HOSTNAME/$DATABASE"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In your notebook folder you find a file with the suffix `.sql` \n",
    "\n",
    "* MATNR.sql\n",
    "\n",
    "where MATNR is your student id number Load your sample data into your database by running the following cell. This might take a while, be patient!\n",
    "\n",
    "<font color=red>**Ignore warnings when loading the data.**</font>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!psql -f \"$MATNR\".sql > log.txt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now try out whether everything works by a sample query:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * postgresql://h12125573:***@postgresql.student-db.svc.cluster.local/h12125573\n",
      "10 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>id</th>\n",
       "        <th>name</th>\n",
       "        <th>date_of_birth</th>\n",
       "        <th>date_of_death</th>\n",
       "        <th>occupation</th>\n",
       "        <th>place_of_birth</th>\n",
       "        <th>place_of_death</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Q10001579</td>\n",
       "        <td>Uladzimir Dudzitsky</td>\n",
       "        <td>1911-01-08</td>\n",
       "        <td>1976-01-01</td>\n",
       "        <td>translator</td>\n",
       "        <td>Q6489121</td>\n",
       "        <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Q1000164</td>\n",
       "        <td>Erik Vliegen</td>\n",
       "        <td>1978-07-20</td>\n",
       "        <td>None</td>\n",
       "        <td>Gigathlon</td>\n",
       "        <td>Q159838</td>\n",
       "        <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Q1000173</td>\n",
       "        <td>Maximilian Holst</td>\n",
       "        <td>1989-06-23</td>\n",
       "        <td>None</td>\n",
       "        <td>handball player</td>\n",
       "        <td>Q14870</td>\n",
       "        <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Q1000190</td>\n",
       "        <td>Christoph Behr</td>\n",
       "        <td>1989-03-21</td>\n",
       "        <td>None</td>\n",
       "        <td>association football player</td>\n",
       "        <td>Q278312</td>\n",
       "        <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Q1000203</td>\n",
       "        <td>Robert Mallet-Stevens</td>\n",
       "        <td>1886-03-24</td>\n",
       "        <td>1945-02-08</td>\n",
       "        <td>designer</td>\n",
       "        <td>Q90</td>\n",
       "        <td>Q90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Q10002044</td>\n",
       "        <td>Lean Nielsen</td>\n",
       "        <td>1935-01-28</td>\n",
       "        <td>2000-10-02</td>\n",
       "        <td>poet</td>\n",
       "        <td>Q1748</td>\n",
       "        <td>Q3255441</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Q1000254</td>\n",
       "        <td>Thomas A. Szlezák</td>\n",
       "        <td>1940-07-12</td>\n",
       "        <td>None</td>\n",
       "        <td>philosopher</td>\n",
       "        <td>Q1781</td>\n",
       "        <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Q10002689</td>\n",
       "        <td>Mariusz Ziółko</td>\n",
       "        <td>1946-09-18</td>\n",
       "        <td>None</td>\n",
       "        <td>engineer</td>\n",
       "        <td>Q1055</td>\n",
       "        <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Q100028</td>\n",
       "        <td>Jörg Hube</td>\n",
       "        <td>1943-11-22</td>\n",
       "        <td>2009-06-19</td>\n",
       "        <td>television actor</td>\n",
       "        <td>Q16085</td>\n",
       "        <td>Q1726</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Q100029</td>\n",
       "        <td>Otto Hermann von Vietinghoff</td>\n",
       "        <td>1722-12-03</td>\n",
       "        <td>1792-06-24</td>\n",
       "        <td>politician</td>\n",
       "        <td>Q1773</td>\n",
       "        <td>Q656</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[('Q10001579', 'Uladzimir Dudzitsky', datetime.date(1911, 1, 8), datetime.date(1976, 1, 1), 'translator', 'Q6489121', None),\n",
       " ('Q1000164', 'Erik Vliegen', datetime.date(1978, 7, 20), None, 'Gigathlon', 'Q159838', None),\n",
       " ('Q1000173', 'Maximilian Holst', datetime.date(1989, 6, 23), None, 'handball player', 'Q14870', None),\n",
       " ('Q1000190', 'Christoph Behr', datetime.date(1989, 3, 21), None, 'association football player', 'Q278312', None),\n",
       " ('Q1000203', 'Robert Mallet-Stevens', datetime.date(1886, 3, 24), datetime.date(1945, 2, 8), 'designer', 'Q90', 'Q90'),\n",
       " ('Q10002044', 'Lean Nielsen', datetime.date(1935, 1, 28), datetime.date(2000, 10, 2), 'poet', 'Q1748', 'Q3255441'),\n",
       " ('Q1000254', 'Thomas A. Szlezák', datetime.date(1940, 7, 12), None, 'philosopher', 'Q1781', None),\n",
       " ('Q10002689', 'Mariusz Ziółko', datetime.date(1946, 9, 18), None, 'engineer', 'Q1055', None),\n",
       " ('Q100028', 'Jörg Hube', datetime.date(1943, 11, 22), datetime.date(2009, 6, 19), 'television actor', 'Q16085', 'Q1726'),\n",
       " ('Q100029', 'Otto Hermann von Vietinghoff', datetime.date(1722, 12, 3), datetime.date(1792, 6, 24), 'politician', 'Q1773', 'Q656')]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "\n",
    "SELECT * FROM People LIMIT 10;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 1\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 1:\n",
    "\n",
    "Draw an ER diagram corresponding to the schema that adequately reflects the, PRIMARY KEY, FOREIGN KEY and NOT NULL constraints in the respective tables, i.e. take care of reflecting ***cardinalities*** of relationships, ***total participation constraints*** and ***keys*** adequately. Argue your choices of when you used total participation constraints and keys."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "--- USE THIS MARKDOWN CELL TO UPLOAD AN IMAGE OF THE ER DIAGRAM.\n",
    "\n",
    "Each building has to have at least one architect. The primary key is the building name, not the id in the picture. A person can have designed several buildings, but does not have to do so because heads of state are also persons, The primary key is person_id. A person has to live in exactly one city, a city can have several people living in it. The primary key is city_id. A city must be in exactly one country, a country can have several cities in it. The primary key is country_id.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 2:\n",
    "\n",
    "Add an additional entity which is in a relationship with one of the existing entities in the scenario. Make sure that\n",
    "\n",
    "* at least one side of the relationship should have a total participation constraint (i.e., be mandatory).\n",
    "* the new entity has a Primary key\n",
    "\n",
    "Draw the extended ER diagram."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "--- USE THIS MARKDOWN CELL TO UPLOAD AN IMAGE OF THE ER DIAGRAM.\n",
    "\n",
    "\n",
    "\n",
    "Argue your choices of when you used participation constraints and key constraints.\n",
    "Each bar has a bar_id as a primary key in the database to differntiate it from other bars, since they can have the same name and owner. Each bar must be in exactly one city. Each city can have several bars, but can also have none. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 3:\n",
    "\n",
    "Finally, provide \n",
    "* CREATE TABLE statement(s) for the new table(s) of the extended schema, and\n",
    "* INSERT statements to add at least 2 sample tuples for each new table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * postgresql://h12125573:***@postgresql.student-db.svc.cluster.local/h12125573\n",
      "Done.\n",
      "Done.\n",
      "2 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "DROP Table IF EXISTS bar CASCADE;\n",
    "CREATE TABLE bar (id VARCHAR PRIMARY KEY, name VARCHAR, drink VARCHAR, owner_ID VARCHAR, theme VARCHAR);\n",
    "INSERT INTO bar values ('1', 'Looney', 'Mojito','1','80s'), ('2', 'Toms', 'Whiskey Sour', '2', '90s');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Why does the following query NOT work to compute the names of buildings designed by people born after 1910?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * postgresql://h12125573:***@postgresql.student-db.svc.cluster.local/h12125573\n",
      "0 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>name</th>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "\n",
    "SELECT Buildings.name \n",
    "FROM Buildings NATURAL JOIN has_architect NATURAL JOIN People\n",
    "WHERE People.date_of_birth > '1910-01-01';"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "--- USE THIS MARKDOWN CELL FOR THE ANSWER"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the code cell below, provide a modified query that indeed computes the names of buildings designed by people born after 1910 using INNER JOINs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * postgresql://h12125573:***@postgresql.student-db.svc.cluster.local/h12125573\n",
      "(psycopg2.ProgrammingError) can't execute an empty query\n",
      "[SQL: ---The reason is using the Natural Join. This does not work here before of how Natural Join Works: It joins attributes with the same names . The issue here is that \"name\" exists in several tables but does not mean the same thing, as in name of person vs name of building vs name of bar. Therefore, the query does not \"know\" and doesn't work. Fixing this requires specifying the names specifically]\n",
      "(Background on this error at: https://sqlalche.me/e/14/f405)\n"
     ]
    }
   ],
   "source": [
    "%%sql\n",
    "---The reason is using the Natural Join. This does not work here before of how Natural Join Works: It joins attributes with the same names . The issue here is that \"name\" exists in several tables but does not mean the same thing, as in name of person vs name of building vs name of bar. Therefore, the query does not \"know\" and doesn't work. Fixing this requires specifying the names specifically \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the code cell below, provide a modified query that indeed computes the names of buildings designed by people born after 1910 using only basic SQL constructs (i.e., using only WHERE conditions to model the inner join)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * postgresql://h12125573:***@postgresql.student-db.svc.cluster.local/h12125573\n",
      "8 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>name</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Claud Beelman</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Angiolo Mazzoni</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Yaakov Rechter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Terry Farrell</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Romualdo de Madariaga y Céspedes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>José Yarnoz Larrosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Nicola Michetti</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Pere Compte</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[('Claud Beelman',),\n",
       " ('Angiolo Mazzoni',),\n",
       " ('Yaakov Rechter',),\n",
       " ('Terry Farrell',),\n",
       " ('Romualdo de Madariaga y Céspedes',),\n",
       " ('José Yarnoz Larrosa',),\n",
       " ('Nicola Michetti',),\n",
       " ('Pere Compte',)]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "\n",
    "SELECT people.name \n",
    "FROM buildings \n",
    "INNER JOIN has_architect \n",
    "ON has_architect.id_building = buildings.id\n",
    "INNER JOIN people \n",
    "ON people.id = has_architect.id_architect\n",
    "WHERE buildings.date_built > '1910-01-01';"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Control Question:* By modifying the query above, answer the following question\n",
    "\n",
    "How many (distinct) buildings were built by people born after 1910-01-01 and how many buildings were not?\n",
    "\n",
    "(ATTENTION: the question has two parts, you can combine them in one query or solve it with two queries)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * postgresql://h12125573:***@postgresql.student-db.svc.cluster.local/h12125573\n",
      "8 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>name</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Claud Beelman</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Angiolo Mazzoni</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Yaakov Rechter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Terry Farrell</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Romualdo de Madariaga y Céspedes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>José Yarnoz Larrosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Nicola Michetti</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Pere Compte</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[('Claud Beelman',),\n",
       " ('Angiolo Mazzoni',),\n",
       " ('Yaakov Rechter',),\n",
       " ('Terry Farrell',),\n",
       " ('Romualdo de Madariaga y Céspedes',),\n",
       " ('José Yarnoz Larrosa',),\n",
       " ('Nicola Michetti',),\n",
       " ('Pere Compte',)]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "\n",
    "SELECT people.name \n",
    "FROM buildings, has_architect, people\n",
    "WHERE buildings.date_built > '1910-01-01' AND has_architect.id_building = buildings.id AND people.id = has_architect.id_architect;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-- USE THIS MARKDOWN CELL FOR YOUR ANSWER, i.e. fill in the numbers of buildings here!\n",
    "\n",
    "8 buildings"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Find out the non-prime attribute with the highest selectivity in the Table `Country` and provide a query computing this selectivity:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * postgresql://h12125573:***@postgresql.student-db.svc.cluster.local/h12125573\n",
      "1 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>selectivity_name</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>1</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[(1,)]"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "\n",
    "SELECT count(distinct (name))/count (name) AS selectivity_name\n",
    "from Country;\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Create an index on the non-prime attribute with the highest selectivity the Table `Country`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * postgresql://h12125573:***@postgresql.student-db.svc.cluster.local/h12125573\n",
      "(psycopg2.errors.DuplicateTable) relation \"idx_name\" already exists\n",
      "\n",
      "[SQL: CREATE INDEX idx_name ON Country USING btree (name);]\n",
      "(Background on this error at: https://sqlalche.me/e/14/f405)\n"
     ]
    }
   ],
   "source": [
    "%%sql\n",
    "\n",
    "CREATE INDEX idx_name ON Country USING btree (name);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Then, define a range query, involving a join, that could benefit from this index (show that the index is used using an EXPLAIN statement and in case the index is not used, argue why)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * postgresql://h12125573:***@postgresql.student-db.svc.cluster.local/h12125573\n",
      "6 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>QUERY PLAN</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Hash Join  (cost=2.38..4.54 rows=1 width=5)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>&nbsp;&nbsp;Hash Cond: ((city.id_country)::text = (country.id)::text)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>&nbsp;&nbsp;-&gt;  Seq Scan on city  (cost=0.00..1.92 rows=92 width=4)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>&nbsp;&nbsp;-&gt;  Hash  (cost=2.36..2.36 rows=1 width=5)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&gt;  Index Only Scan using country_pkey on country  (cost=0.14..2.36 rows=1 width=5)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Index Cond: ((id &gt;= &#x27;100&#x27;::text) AND (id &lt;= &#x27;9000&#x27;::text))</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[('Hash Join  (cost=2.38..4.54 rows=1 width=5)',),\n",
       " ('  Hash Cond: ((city.id_country)::text = (country.id)::text)',),\n",
       " ('  ->  Seq Scan on city  (cost=0.00..1.92 rows=92 width=4)',),\n",
       " ('  ->  Hash  (cost=2.36..2.36 rows=1 width=5)',),\n",
       " ('        ->  Index Only Scan using country_pkey on country  (cost=0.14..2.36 rows=1 width=5)',),\n",
       " (\"              Index Cond: ((id >= '100'::text) AND (id <= '9000'::text))\",)]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "\n",
    "EXPLAIN SELECT Country.id from Country\n",
    "JOIN City \n",
    "    ON country.id=city.id_country\n",
    "WHERE country.id between '100' AND '9000';"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Which join method is used in the query plan returned by the EXPLAIN statement above? Try to argue why this join method could have been chosen over other alternatives in your own words."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-- USE THIS MARKDOWN CELL FOR YOUR ANSWER\n",
    "\n",
    "A Hash Join is used. It is chosen over other alternatives, potentially, because the tables we want to join are not sorted/indexed (which would be necessary for a merge join). This saves cost."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
